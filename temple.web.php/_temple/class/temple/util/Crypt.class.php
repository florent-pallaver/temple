<?php

namespace temple\util;

final class Crypt {

	const DEFAULT_RANDOM_BYTE_COUNT = 64;

	public static $KEY_PREFIX = '$1$Dx1.QP1.$aoZDkJ';

	public static $METHOD = 'AES-128-CBC';
	
	private function __construct() {}

	public static function encrypt($str, $salt = '') {
		return openssl_encrypt($str, self::$METHOD, self::$KEY_PREFIX . $salt);
	}

	public static function decrypt($str, $salt = '') {
		// trim removes the \0 padded at the end of the string
		return trim(openssl_decrypt($str, self::$METHOD, self::$KEY_PREFIX . $salt));
	}

	/**
	 * Hashes the given string, the length of the returned string will be 60 characters max.
	 * @param string $pass a string
	 * @return string the hashed string
	 * @see verify
	 */
	public static function crypt($pass) {
		$salt = str_replace('+', '.', base64_encode(mcrypt_create_iv(22, MCRYPT_DEV_URANDOM)));
		return crypt((string)$pass, '$2y$10$'.$salt.'$') ;
	}

	/**
	 * 
	 * @param string $pass
	 * @param string $hash
	 * @return boolean
	 */
	public static function verify($pass, $hash) {
		return crypt($pass, $hash) == $hash ;
	}
	
	/**
	 * Generates a random hexadecimal string, its length will be $byteCount &times 2.
	 * 
	 * @param int $byteCount
	 * @return string the hexadecimal representation of $byteCount randomly generated bytes.
	 */
	public static function randomBytes($byteCount = self::DEFAULT_RANDOM_BYTE_COUNT) {
		$bytes = openssl_random_pseudo_bytes($byteCount) ;
		if(!$bytes) {
			throw new \RuntimeException('Unable to generate ramdom bytes.') ;
		}
		return bin2hex($bytes);
	}

}
